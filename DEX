pragma solidity ^0.8.0;

import "./IERC20.sol";

contract Dex {
    mapping(address => mapping(address => uint256)) public tokens;

    function deposit(address token, uint256 amount) external {
        require(IERC20(token).transferFrom(msg.sender, address(this), amount), "Transfer failed");
        tokens[token][msg.sender] += amount;
    }

    function withdraw(address token, uint256 amount) external {
        require(tokens[token][msg.sender] >= amount, "Insufficient balance");
        tokens[token][msg.sender] -= amount;
        require(IERC20(token).transfer(msg.sender, amount), "Transfer failed");
    }

    function trade(address token1, uint256 amount1, address token2, uint256 amount2) external {
        require(tokens[token1][msg.sender] >= amount1, "Insufficient balance of token1");
        require(tokens[token2][address(this)] >= amount2, "Insufficient liquidity");

        tokens[token1][msg.sender] -= amount1;
        tokens[token2][msg.sender] += amount2;
        tokens[token1][address(this)] += amount1;
        tokens[token2][address(this)] -= amount2;
    }
}
